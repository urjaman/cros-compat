# This is a cruddy PKGBUILD based on the "audio" target in crouton (ARM-only)

pkgname=cras-alsa
pkgver=0.1
pkgrel=2
pkgdesc=""
arch=('armv7h')
license=('GPL')
url=""
source=(https://chromium.googlesource.com/chromiumos/third_party/adhd/+archive/master.tar.gz)
md5sums=('SKIP')

ALSALIBDIR="/usr/lib/alsa-lib"
CRASLIBDIR="/usr/lib"
CRASBINDIR="/usr/bin"

prepare() {
	cd cras/src
        echo '#define VCSID "crouton-master"' > common/cras_version.h
        sed -e 's/#include <sbc.*//' -i common/cras_sbc_codec.h
        cat > common/cras_sbc_codec.c <<END
#include <stdint.h>
#include <stdlib.h>
#include "cras_audio_codec.h"

struct cras_audio_codec *cras_sbc_codec_create(uint8_t freq,
		   uint8_t mode, uint8_t subbands, uint8_t alloc,
		   uint8_t blocks, uint8_t bitpool) {
    abort();
}
void cras_sbc_codec_destroy(struct cras_audio_codec *codec) {
    abort();
}
END
        # Drop SBC constants
        sed -e 's/SBC_[A-Z0-9_]*/0/g' -i tests/cras_test_client.c
}



# Convert an automake Makefile.am into a shell script, and provide useful
# functions to compile libraries and executables.
# Needs to be run in the same directory as the Makefile.am file.
# This outputs the converted Makefile.am to stdout, which is meant to be
# piped to sh -s (see audio and xiat for examples)
convert_automake() {
    echo '
        top_srcdir=".."
        top_builddir=".."
    '
    sed -e '
        # Concatenate lines ending in \
        : start; /\\$/{N; b start}
        s/ *\\\n[ \t]*/ /g
        # Convert automake to shell
        s/^[^ ]*:/#\0/
        s/^\t/#\0/
        s/\t/ /g
        s/ *= */=/
        s/\([^ ]*\) *+= */\1=${\1}\ /
        s/ /\\ /g
        y/()/{}/
        s/if\\ \(.*\)/if [ -n "${\1}" ]; then/
        s/endif/fi/
    ' 'Makefile.am'
    echo '
        # buildsources: Build all source files for target
        #  $1: target
        #  $2: additional gcc flags
        # Prints a list of .o files
        buildsources() {
            local target="$1"
            local extragccflags="$2"

            eval local sources=\"\$${target}_SOURCES\"
            eval local cppflags=\"\$${target}_CPPFLAGS\"
            local cflags="$cppflags ${CFLAGS} ${AM_CFLAGS}"

            for dep in $sources; do
                if [ "${dep%.c}" != "$dep" ]; then
                    ofile="${dep%.c}.o"
                    gcc -c "$dep" -o "$ofile" '"$archgccflags"' \
                        $cflags $extragccflags 1>&2 || return $?
                    echo -n "$ofile "
                fi
            done
        }

        # fixlibadd:
        # Fix list of libraries ($1): replace lib<x>.la by -l<x>
        fixlibadd() {
            for libdep in $*; do
                if [ "${libdep%.la}" != "$libdep" ]; then
                    libdep="${libdep%.la}"
                    libdep="-l${libdep#lib}"
                fi
                echo -n "$libdep "
            done
        }

        # buildlib: Build a library
        #  $1: library name
        #  $2: additional linker flags
        buildlib() {
            local lib="$1"
            local extraflags="$2"
            local ofiles
            # local eats the return status: separate the 2 statements
            ofiles="`buildsources "${lib}_la" "-fPIC -DPIC"`"

            eval local libadd=\"\$${lib}_la_LIBADD\"
            eval local ldflags=\"\$${lib}_la_LDFLAGS\"

            libadd="`fixlibadd $libadd`"

            # Detect library version (e.g. 0.0.0)
            local fullver="`echo -n "$ldflags" | \
                      sed -n '\''y/:/./; \
                                 s/.*-version-info \([0-9.]*\)$/\\1/p'\''`"
            local shortver=""
            # Get "short" library version (e.g. 0)
            if [ -n "$fullver" ]; then
                shortver=".${fullver%%.*}"
                fullver=".$fullver"
            fi
            local fullso="$lib.so$fullver"
            local shortso="$lib.so$shortver"
            gcc -shared -fPIC -DPIC $ofiles $libadd -o "$fullso" \
                '"$archgccflags"' $extraflags -Wl,-soname,"$shortso"
            if [ -n "$fullver" ]; then
                ln -sf "$fullso" "$shortso"
                # Needed at link-time only
                ln -sf "$shortso" "$lib.so"
            fi
        }

        # buildexe: Build an executable file
        #  $1: executable file name
        #  $2: additional linker flags
        buildexe() {
            local exe="$1"
            local extraflags="$2"
            local ofiles="`buildsources "$exe" ""`"

            eval local ldadd=\"\$${exe}_LDADD\"
            eval local ldflags=\"\$${exe}_LDFLAGS\"

            ldadd="`fixlibadd $ldadd`"

            gcc $ofiles $ldadd -o "$exe" '"$archgccflags"' $extraflags
        }
    '
}


build() {
	cd cras/src
        # Convert Makefile.am to a shell script, and run it.
        {
            convert_automake

            echo '
                CFLAGS="$CFLAGS -Wno-int-in-bool-context -DCRAS_SOCKET_FILE_DIR=\"/var/run/cras\""

                buildlib libcras

                # Pass -rpath=$CRASLIBDIR to linker, so we do not need to add
                # the directory to ldconfig search path (some distributions do
                # not include /usr/local/lib in /etc/ld.so.conf).
                # We also need to add "-L." as we are not using .la files.
                extraflags="-Wl,-rpath='"$CRASLIBDIR"' -L."

                buildlib libasound_module_pcm_cras "$extraflags"
                buildlib libasound_module_ctl_cras "$extraflags"
                buildexe cras_test_client "$extraflags"
            '
        } | sh -s -e $SETOPTIONS
}

package() {
	cd cras/src
        mkdir -p "${pkgdir}$CRASBINDIR/" "${pkgdir}$CRASLIBDIR/" "${pkgdir}$ALSALIBDIR/"
        /usr/bin/install -s libcras.so.*.* "${pkgdir}$CRASLIBDIR/"
	ln -s libcras.so.*.* "${pkgdir}$CRASLIBDIR/libcras.so.0"
        /usr/bin/install -s libasound_module_pcm_cras.so "${pkgdir}$ALSALIBDIR/"
        /usr/bin/install -s libasound_module_ctl_cras.so "${pkgdir}$ALSALIBDIR/"
        /usr/bin/install -s cras_test_client "${pkgdir}$CRASBINDIR/"
	# Configure ALSA to use it
	mkdir -p "${pkgdir}/usr/share/alsa/alsa.conf.d"
	cat > "${pkgdir}/usr/share/alsa/alsa.conf.d/10-cras.conf" <<EOF
pcm.cras {
    type cras
    hint {
        show on
        description "Chromium OS Audio Server"
    }
}
ctl.cras {
    type cras
}

# Default: route all audio through the CRAS plugin.
pcm.!default {
    type cras
    hint {
        show on
        description "Default ALSA Output (currently Chromium OS Audio Server)"
    }
}
ctl.!default {
    type cras
}
EOF
}

